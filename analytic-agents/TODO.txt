Sketching out a set of agents that will "close the cycle" with respect to generating
offers based on user demographics and behavior.


1.  Get the FUSE things to work so that documents can be dropped into
     and be read out from google cloud storage using the operating system's ordinary
     way of doing things, hopefully making it simple/feasable etc. to
     use Stata, and all other kinds of tooling to work on datasets.

2.  Make the sample-agent.py be able to:

     * On my workstation, pick up files from a bucket (without FUSE)
     * Write directly to bucket (without FUSE).
     * Run as a kubernetes job with a default bucket.

3. Copy/Rewriting the sample-agent.py into another agent that will
    listen for yaml files describing offers, and pushing them to Firestore
    for the appropriate subscribers.

4. Figure out how to get data from analytics about the users
    and then feed that to the agent in an orderly manner.

5. Think about making the agents as dropwizard agents
    rather than python.  If/when it's known how to run the agents
    as kubernetes loads, then it's time to step up to kotlin/dropwizard
    to do some heavy lifting.
