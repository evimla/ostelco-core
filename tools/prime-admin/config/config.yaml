# This config is used as config.yaml when prime is running using docker-compose for Acceptance Testing

modules:
  - type: env
    httpClient:
      timeout: 10000ms
      tls:
        # Default is 500 milliseconds, we need more when debugging.
        protocol: TLSv1.2
#
#        keyStoreType: JKS
        keyStoreType: PKCS12
#        keyStoreType: JCEKS
#        keyStorePath: src/main/resources/es2plus-prime-csr_prime-prod-may-2019_v1.jks
#        keyStorePath: src/main/resources/prod-idemia-client-crt.jks
        keyStorePath: src/main/resources/es2plus-prime-csr_prime-prod-may-2019.jks
#        keyStorePath: src/main/resources/dev-idemia-client-crt.jks
        keyStorePassword: foobar
        verifyHostname: false
        trustSelfSignedCertificates: true
#        supportedProtocols: [TLSv1.2]
#        certAlias: impcert
#  - type: firebase
#    config:
#      configFile: config/prime-service-account.json
#      rootPath: test
#  - type: stripe-payment-processor
#  - type: neo4j
#    config:
#      host: neo4j
#      protocol: bolt
#      hssNameLookupService:
#        serviceInterface: org.ostelco.prime.storage.graph.HssNameLookupService
#        textReader:
#          type: classpathResource
#          filename: /HssNameLookupService.kts
#      onNewCustomerAction:
#        serviceInterface: org.ostelco.prime.storage.graph.OnNewCustomerAction
#        textReader:
#          type: classpathResource
#          filename: /OnNewCustomerAction.kts
#  - type: sim-manager
#    config:
#      hlrs: []
#      profileVendors:
#        - name: Idemia
#          es2plusEndpoint: ""
#          es9plusEndpoint: ""
#          requesterIdentifier: ""
#      phoneTypes: []
#      database:
#        driverClass: org.postgresql.Driver
#        user: ${DB_USER}
#        password: ${DB_PASSWORD}
#        # https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory#postgres
#        url: jdbc:postgresql://google/${DB_NAME}?cloudSqlInstance=${DB_INSTANCE_CONNECTION_NAME}
#        initialSize: 2
#        properties:
#          socketFactory: com.google.cloud.sql.postgres.SocketFactory


logging:
  level: ALL