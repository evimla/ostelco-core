package org.ostelco.simcards.inventory

<<<<<<< HEAD
import org.apache.http.impl.client.CloseableHttpClient
import org.hibernate.validator.constraints.NotEmpty
import org.ostelco.sim.es2plus.ProfileStatus
import org.ostelco.simcards.admin.ProfileVendorConfig
import org.ostelco.simcards.admin.SimAdministrationConfiguration
=======
import org.hibernate.validator.constraints.NotEmpty
import org.ostelco.prime.apierror.ApiErrorMapper.mapSimManagerErrorToApiError
import org.ostelco.prime.apierror.ApiErrorCode
import org.ostelco.prime.jsonmapper.asJson
import org.ostelco.prime.simmanager.SimManagerError
>>>>>>> origin/develop
import java.io.IOException
import java.io.InputStream
import javax.ws.rs.*
import javax.ws.rs.core.MediaType
import javax.ws.rs.core.Response


///
///  The web resource using the protocol domain model.
///

<<<<<<< HEAD
@Path("/ostelco/sim-inventory/{hssVendors}")
class SimInventoryResource(private val httpClient: CloseableHttpClient,
                           private val config: SimAdministrationConfiguration,
                           private val dao: SimInventoryDAO) {

    companion object {
        private fun <T> assertNonNull(v: T?): T {
            if (v == null) {
                throw WebApplicationException(Response.Status.NOT_FOUND)
            } else {
                return v
            }
        }
    }
=======
@Path("/ostelco/sim-inventory/{hlrVendors}")
class SimInventoryResource(private val api: SimInventoryApi) {
>>>>>>> origin/develop

    @GET
    @Path("profileStatusList/{iccid}")
    @Produces(MediaType.APPLICATION_JSON)
    fun getSimProfileStatus(
<<<<<<< HEAD
            @NotEmpty @PathParam("hssVendors") hss: String,
            @NotEmpty @PathParam("iccid") iccid: String): ProfileStatus? {
        val simEntry = assertNonNull(dao.getSimProfileByIccid(iccid))
        val hssAdapter = assertNonNull(dao.getHssEntryById(simEntry.hssId))
        assertCorrectHss(hss, hss == hssAdapter.name)

        val simVendorAdapter = assertNonNull(dao.getProfileVendorAdapterById(
                simEntry.profileVendorId))
        val config: ProfileVendorConfig = assertNonNull(config.profileVendors.firstOrNull {
            it.name == simVendorAdapter.name
        })

        return simVendorAdapter.getProfileStatus(httpClient, config, iccid)
    }
=======
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @NotEmpty @PathParam("iccid") iccid: String): Response =
            api.getSimProfileStatus(hlrName, iccid)
                    .fold(
                            {
                                error("Failed to fetch SIM profile from vendor for BSS: ${hlrName} and ICCID: ${iccid}",
                                        ApiErrorCode.FAILED_TO_FETCH_SIM_PROFILE, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()
>>>>>>> origin/develop

    @GET
    @Path("iccid/{iccid}")
    @Produces(MediaType.APPLICATION_JSON)
    fun findSimProfileByIccid(
<<<<<<< HEAD
            @NotEmpty @PathParam("hssVendors") hss: String,
            @NotEmpty @PathParam("iccid") iccid: String): SimEntry {
        val simEntry = assertNonNull(dao.getSimProfileByIccid(iccid))
        val hssAdapter = assertNonNull(dao.getHssEntryById(simEntry.hssId))
        assertCorrectHss(hss, hss == hssAdapter.name)
        return simEntry
    }

=======
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @NotEmpty @PathParam("iccid") iccid: String): Response =
            api.findSimProfileByIccid(hlrName, iccid)
                    .fold(
                            {
                                error("Failed to find SIM profile for BSS: ${hlrName} and ICCID: ${iccid}",
                                        ApiErrorCode.FAILED_TO_FETCH_SIM_PROFILE, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()

    @POST
    @Path("iccid/{iccid}")
    @Produces(MediaType.APPLICATION_JSON)
    fun activateHlrProfileByIccid(
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @NotEmpty @PathParam("iccid") iccid: String): Response =
            api.activateHlrProfileByIccid(hlrName, iccid)
                    .fold(
                            {
                                error("Failed to activate SIM profile with BSS ${hlrName} for ICCID: ${iccid}",
                                        ApiErrorCode.FAILED_TO_ACTIVATE_SIM_PROFILE_WITH_HLR, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()


    @DELETE
    @Path("iccid/{iccid}")
    @Produces(MediaType.APPLICATION_JSON)
    fun deactivateHlrProfileByIccid(
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @NotEmpty @PathParam("iccid") iccid: String): Response =
            api.deactivateHlrProfileByIccid(hlrName, iccid)
                    .fold(
                            {
                                error("Failed to deactivate SIM profile with BSS ${hlrName} for ICCID: ${iccid}",
                                        ApiErrorCode.FAILED_TO_DEACTIVATE_SIM_PROFILE_WITH_HLR, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()
>>>>>>> origin/develop

    @GET
    @Path("imsi/{imsi}")
    @Produces(MediaType.APPLICATION_JSON)
    fun findSimProfileByImsi(
<<<<<<< HEAD
            @NotEmpty @PathParam("hssVendors") hss: String,
            @NotEmpty @PathParam("imsi") imsi: String): SimEntry {
        val simEntry = assertNonNull(dao.getSimProfileByImsi(imsi))
        val hssAdapter = assertNonNull(dao.getHssEntryById(simEntry.hssId))
        assertCorrectHss(hss, hss == hssAdapter.name)
        return simEntry
    }
=======
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @NotEmpty @PathParam("imsi") imsi: String): Response =
            api.findSimProfileByImsi(hlrName, imsi)
                    .fold(
                            {
                                error("Failed to find SIM profile for BSS: ${hlrName} and IMSI: ${imsi}",
                                        ApiErrorCode.FAILED_TO_FETCH_PROFILE, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()
>>>>>>> origin/develop

    @GET
    @Path("msisdn/{msisdn}")
    @Produces(MediaType.APPLICATION_JSON)
<<<<<<< HEAD
    fun findByMsisdn(
            @NotEmpty @PathParam("hssVendors") hss: String,
            @NotEmpty @PathParam("msisdn") msisdn: String): SimEntry {
        val simEntry = assertNonNull(dao.getSimProfileByMsisdn(msisdn))
        val hssAdapter = assertNonNull(dao.getHssEntryById(simEntry.hssId))
        assertCorrectHss(hss, hss == hssAdapter.name)
        return simEntry
    }

=======
    fun findSimProfileByMsisdn(
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @NotEmpty @PathParam("msisdn") msisdn: String): Response =
            api.findSimProfileByMsisdn(hlrName, msisdn)
                    .fold(
                            {
                                error("Failed to find SIM profile for BSS: ${hlrName} and MSISDN: ${msisdn}",
                                        ApiErrorCode.FAILED_TO_FETCH_PROFILE, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()

    @POST
    @Path("esim")
    @Produces(MediaType.APPLICATION_JSON)
    fun activateNextEsimProfile(
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @DefaultValue("_") @QueryParam("phoneType") phoneType: String): Response =
            api.activateNextEsimProfile(hlrName, phoneType)
                    .fold(
                            {
                                error("Failed to activate SIM profile with BSS ${hlrName}",
                                        ApiErrorCode.FAILED_TO_ACTIVATE_SIM_PROFILE, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()
>>>>>>> origin/develop

    @GET
    @Path("esim")
    @Produces(MediaType.APPLICATION_JSON)
    fun allocateNextEsimProfile(
<<<<<<< HEAD
            @NotEmpty @PathParam("hssVendors") hss: String,
            @DefaultValue("_") @QueryParam("phoneType") phoneType: String): SimEntry? {
        val hssEntry = assertNonNull(dao.getHssEntryByName(hss))
        val profile = config.getProfileForPhoneType(phoneType)
        val simEntry = assertNonNull(dao.findNextReadyToUseSimProfileForHlr(hssEntry.id,
                profile))
        assertCorrectHss(hss, hssEntry.id == simEntry.hssId)

        val simVendorAdapter = assertNonNull(dao.getProfileVendorAdapterById(
                simEntry.profileVendorId))
        val profileVendorConfig: ProfileVendorConfig = assertNonNull(config.profileVendors.filter {
            it.name == simVendorAdapter.name
        }.firstOrNull())

        /* Add 'code' field content. */
        return assertNonNull(dao.setProvisionState(simEntry.id!!,
                ProvisionState.PROVISIONED)!!.let {
            it.copy(code = "LPA:${profileVendorConfig.es9plusEndpoint}:${it.matchingId}")
        })
    }

    private fun assertCorrectHss(hss: String, match: Boolean) {
        if (!match) {
            throw WebApplicationException("Attempt at impersonating $hss HLR",
                    Response.Status.BAD_REQUEST)
        }
    }
=======
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @DefaultValue("_") @QueryParam("phoneType") phoneType: String): Response =
            api.allocateNextEsimProfile(hlrName, phoneType)
                    .fold(
                            {
                                error("Failed to reserve SIM profile with BSS ${hlrName}",
                                        ApiErrorCode.FAILED_TO_RESERVE_ACTIVATED_SIM_PROFILE, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()
>>>>>>> origin/develop

    @PUT
    @Path("import-batch/profilevendor/{simVendor}")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.TEXT_PLAIN)
    @Throws(IOException::class)
    fun importBatch(
<<<<<<< HEAD
            @NotEmpty @PathParam("hssVendors") hss: String,
            @NotEmpty @PathParam("simVendor") simVendor: String,
            csvInputStream: InputStream): SimImportBatch? {
        val profileVendorAdapter = assertNonNull(dao.getProfileVendorAdapterByName(simVendor))
        val hssAdapter = assertNonNull(dao.getHssEntryByName(hss))

        if (!dao.simVendorIsPermittedForHlr(profileVendorAdapter.id, hssAdapter.id)) {
            throw WebApplicationException(Response.Status.BAD_REQUEST)
        }
        return assertNonNull(dao.importSims(
                importer = "importer", // TODO: This is a very strange name for an importer .-)
                hssId = hssAdapter.id,
                profileVendorId = profileVendorAdapter.id,
                csvInputStream = csvInputStream))
=======
            @NotEmpty @PathParam("hlrVendors") hlrName: String,
            @NotEmpty @PathParam("simVendor") simVendor: String,
            csvInputStream: InputStream): Response =
            api.importBatch(hlrName, simVendor, csvInputStream)
                    .fold(
                            {
                                error("Failed to upload batch with SIM profiles for BSS ${hlrName} and SIM profile vendor ${simVendor}",
                                        ApiErrorCode.FAILED_TO_IMPORT_BATCH, it)
                            },
                            { Response.status(Response.Status.OK).entity(asJson(it)) }
                    ).build()

    /* Maps internal errors to format suitable for HTTP/REST. */
    private fun error(description: String, code: ApiErrorCode, error: SimManagerError): Response.ResponseBuilder {
        val apiError = mapSimManagerErrorToApiError(description, code, error)
        return Response.status(apiError.status).entity(asJson(apiError))
>>>>>>> origin/develop
    }
}
