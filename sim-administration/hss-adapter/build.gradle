plugins {
    id "application"
    id "com.google.protobuf"
    id "org.jetbrains.kotlin.jvm"
    id "idea"
    id "com.github.johnrengelman.shadow"
}

dependencies {

    implementation project(":prime-modules")
    // TODO move dependencies to separate library so we do not add entire sim-amanger to hss-adapter
    implementation project(":sim-administration:simmanager")
    
    api "io.grpc:grpc-netty-shaded:$grpcVersion"
    api "io.grpc:grpc-protobuf:$grpcVersion"
    api "io.grpc:grpc-stub:$grpcVersion"
    api "io.grpc:grpc-core:$grpcVersion"
    implementation "javax.annotation:javax.annotation-api:$javaxAnnotationVersion"

    api "io.arrow-kt:arrow-core:$arrowVersion"
    api "io.arrow-kt:arrow-typeclasses:$arrowVersion"
    api "io.arrow-kt:arrow-instances-core:$arrowVersion"
    api "io.arrow-kt:arrow-effects:$arrowVersion"

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-client:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-jdbi3:$dropwizardVersion"
    implementation "io.dropwizard.metrics:metrics-core:$metricsVersion"
    implementation "com.google.guava:guava:$guavaVersion"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"

    testImplementation "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"


    // XXX IF this works, then it's too general. We're not using the
    //     postgres, but we are use some of the dependencies.
    testImplementation "org.testcontainers:postgresql:$testcontainersVersion"
}

configurations {
    integration
    integrationImplementation.extendsFrom implementation
    integrationImplementation.extendsFrom runtime
    integrationImplementation.extendsFrom runtimeOnly
    integrationImplementation.extendsFrom testImplementation
}

shadowJar {
    mainClassName = 'org.ostelco.simcards.hss.HssAdapterApplicationKt'
    mergeServiceFiles()
    archiveClassifier = "uber"
    zip64 true
    archiveVersion = ""
}

protobuf {
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }

    protoc { artifact = "com.google.protobuf:protoc:$protocVersion" }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}


sourceSets {
    integration {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs += file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}



apply from: '../../gradle/jacoco.gradle'

idea {
    module {
        sourceDirs += files("${protobuf.generatedFilesBaseDir}/main/java")
        sourceDirs += files("${protobuf.generatedFilesBaseDir}/main/grpc")
        testSourceDirs += file('src/integration-test/kotlin')
    }
}



task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

build.dependsOn integration

