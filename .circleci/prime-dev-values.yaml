# DEV values for prime.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2
  
prime:
  image: eu.gcr.io/pi-ostelco-dev/prime
  tag: 016b0f06c
  pullPolicy: Always
  configDataBucket: "gs://pi-ostelco-dev-prime-files/dev"
  secrets:
    - secretName: "prime-sa-key-temp"  
      containerMountPath: "/secret"
  env: 
    FIREBASE_ROOT_PATH: dev
    NEO4J_HOST: neo4j-neo4j.neo4j.svc.cluster.local
    SLACK_CHANNEL: prime-alerts-new
    DATASTORE_NAMESPACE: dev
    DATA_TRAFFIC_TOPIC: data-traffic
    PURCHASE_INFO_TOPIC: purchase-info
    ACTIVE_USERS_TOPIC: active-users
    GOOGLE_CREDENTIALS_PATH: "/secret/pantel-prod.json"
    PROJECT_ID: pi-ostelco-dev 


  envFromSecret:
    - name: SLACK_WEBHOOK_URI
      secretName: slack-secrets
      secretKey: slackWebHookUri
    - name: STRIPE_API_KEY
      secretName: stripe-secrets
      secretKey: stripeApiKey
    - name: STRIPE_ENDPOINT_SECRET 
      secretName: stripe-secrets
      secretKey: stripeEndpointSecret
    - name: SCANINFO_STORAGE_BUCKET 
      secretName: scaninfo-secrets
      secretKey:  bucketName
    - name: JUMIO_API_TOKEN
      secretName: jumio-secrets
      secretKey: apiToken        
    - name: JUMIO_API_SECRET
      secretName: jumio-secrets
      secretKey: apiSecret   
  ports:
    - 8080
    - 8081
    - 8082 
    - 8083 
  resources: 
    limits:
      cpu: 200m
      memory: 350Mi
    requests:
      cpu: 100m
      memory: 200Mi  
  livenessProbe: {}
  readinessProbe: {} 
  annotations: 
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/prometheus-metrics'
    prometheus.io/port: '8081'  


canary: {}
  # weight: 25
  # headers: # only route requests with these headers to the canary service
  #   x-mode: canary
  # tag: e449ed672
  
esp:
  image: gcr.io/endpoints-release/endpoints-runtime
  tag: 1
  pullPolicy: IfNotPresent

ocsEsp: 
  enabled: true
  env: {}
  endpointAddress: ocs.new.dev.ostelco.org
  ports:
    http2_port: 9000

apiEsp: 
  enabled: true
  env: {}
  endpointAddress: api.new.dev.ostelco.org
  ports:
    http2_port: 9002

metricsEsp:
  enabled: true
  env: {}
  endpointAddress: metrics.new.dev.ostelco.org
  ports:
    http2_port: 9004

alvinApiEsp:
  enabled: true
  env: {}  
  endpointAddress: alvin-api.new.dev.ostelco.org
  ports: 
    http_port: 9008  

houstonApiEsp:
  enabled: true
  env: {}  
  endpointAddress: houston-api.new.dev.ostelco.org
  ports: 
    http_port: 9006    

services:
  ocs:
    name: ocs
    type: ClusterIP
    port: 80
    targetPort: 9000
    portName: grpc 
    host: ocs.new.dev.ostelco.org
    grpcOrHttp2: true
  api:
    name: api
    type: ClusterIP
    port: 80
    targetPort: 9002
    portName: http
    host: api.new.dev.ostelco.org
    grpcOrHttp2: true
  metrics: 
    name: metrics
    type: ClusterIP
    port: 80
    targetPort: 9004 
    portName: grpc
    host: metrics.new.dev.ostelco.org
    grpcOrHttp2: true
  prime-houston-api: 
    name: prime-houston-api
    type: ClusterIP
    port: 443
    targetPort: 7443  
    portName: https
    host: houston-api.new.dev.ostelco.org
  prime-alvin-api: 
    name: alvin-api
    type: ClusterIP
    port: 80
    targetPort: 9008  
    portName: https
    host: alvin-api.new.dev.ostelco.org
  pseudonym-server: 
    name: pseudonym-server
    type: ClusterIP
    port: 80
    targetPort: 8080  
    portName: http


certs: 
  enabled: true
  dnsProvider: dev-clouddns
  issuer: letsencrypt-production 
  tlsSecretName: new-dev-ostelco-tls
  hosts:
    - '*.new.dev.ostelco.org'

disruptionBudget: 
  enabled: false
  minAvailable: 1

nodeSelector: {}

tolerations: []

affinity: {}